from _typeshed import Incomplete as Incomplete
from collections.abc import Generator

class ScrapyPokedexSpiderMiddleware:
    @classmethod
    def from_crawler(cls, crawler) -> None: ...
    def process_spider_input(self, response, spider) -> None: ...
    def process_spider_output(self, response, result, spider) -> Generator[Incomplete]: ...
    def process_spider_exception(self, response, exception, spider) -> None: ...
    def process_start_requests(self, start_requests, spider) -> Generator[Incomplete]: ...
    def spider_opened(self, spider) -> None: ...

class ScrapyPokedexDownloaderMiddleware:
    @classmethod
    def from_crawler(cls, crawler) -> None: ...
    def process_request(self, request, spider) -> None: ...
    def process_response(self, request, response, spider) -> None: ...
    def process_exception(self, request, exception, spider) -> None: ...
    def spider_opened(self, spider) -> None: ...
